<!DOCTYPE html><html lang="en"><head><title>kchess</title><meta charset="utf-8"><meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<style>body{margin:0px;overflow:hidden;font-family:sans-serif;} div{float:left} #timer{border:1px solid black;width:110px;color:gray}</style></head>
<body onload="pickclass()"><div><div><canvas id="cv" draggable="true" width="576" height="576"></canvas></div><div id="pick"><textarea id="log" readonly rows="10" cols="50"></textarea><br><input type="text" id="input" autofocus><input type="submit" value="Send" onclick="msgsend();"><br><br>Select a piece to begin. <a href="https://github.com/srpeck/kchess/blob/gh-pages/docs/kchessdoc.md" target="_blank" onclick="window.open('https://github.com/srpeck/kchess/blob/gh-pages/docs/kchessdoc.md');">Instructions</a>; WASD, left/double/right click, and drag for input. <br></div></div><div><div id="timer"></div><div id="out"></div></div>
<script>
var ctx=cv.getContext('2d'),imgs={},load=['WN','WB','WR','BN','BB','BR','WK','WP','WQ','BK','BP','BQ','WW','BW','e','c','f','b','WU']; for(i in load){imgs[load[i]]=new Image(); imgs[load[i]].src='img/'+load[i]+'.png';}
var ws,cf=false,me=0,o={},prev={},ticktimer,dragged=null,a={drag:{R:'grabthrow',K:'cmdpawn',N:'sword',Q:'poison'},right:{N:'lance',B:'meteor',R:'smash',K:'spawn',Q:'backstab',P:'pawnattmove'},left:{N:'arrow',B:'meteor',R:'push',K:'wall',Q:'blind',P:'pawnattmove'},dbl:{N:'sword',Q:'poison'}};
function pickclass(){
    var i=j=0;
    for(img in imgs){
        if(i>2){i=0;j++;} if(j>1)return;
        pick.appendChild(document.createElement('button')).setAttribute('onclick','send("promote '+i+' '+j+'")'); pick.lastChild.appendChild(imgs[img]); i++;
    }
}
function connect(cb){
    if('WebSocket' in window){
        if(cf)return; else cf=true;
        //ws=new WebSocket('ws://localhost:8080/2dkchess.htm'); log.innerHTML+='Connecting...\n';
        ws=new WebSocket('wss://20c44ced.ngrok.io/:8080/2dkchess.htm'); log.innerHTML+='Connecting...\n';
        ws.onopen=function(e){log.innerHTML+='Connected.\n'; cb();};
        ws.onclose=function(e){log.innerHTML+='You or your King have been slain. Select a piece to reconnect.\n'; cf=false; me=0; o={}; dragged=null; timer.innerHTML='&nbsp;'; clearInterval(ticktimer);};
        ws.onerror=function(e){console.log(e.data);};
        ws.onmessage=function(e){
            if(me===0)me=e.data;
            var d=JSON.parse(e.data);
            for(u in d)if(d[u].conn==me){o=d[u];continue;}
            if(o.hp>=0)window.requestAnimationFrame(function(){
                ctx.clearRect(0,0,576,576);
                for(var x=0;x<10;x++)for(var y=0;y<10;y++)if(((o.lx+x)%2&&(o.ly+y)%2)||(!((o.lx+x)%2)&&!((o.ly+y)%2)))ctx.drawImage(imgs.c,64*x,64*y);
                for(u in d){
                    var p=[64*(d[u].lx-o.lx+4),64*(8-(d[u].ly-o.ly+4))];
                    var img=imgs[d[u].cla in ['U','W']?d[u].cla:((d[u].team?"B":"W")+d[u].cla)];
                    ctx.drawImage(img,p[0]+(64/2-img.width/2),p[1]+(64/2-img.width/2));
                    if(d[u].cla!='W'){
                        if(d[u].chan>0){ctx.fillStyle='cyan'; ctx.fillRect(p[0],p[1]+64-18,64*(d[u].chan/100),6);}
                        if(d[u].hp>0){ctx.fillStyle='green'; ctx.fillRect(p[0],p[1]+64-12,d[u].hp,6);}
                        if(d[u].e>0){ctx.fillStyle='yellow'; ctx.fillRect(p[0],p[1]+64-6,d[u].e,6);}
                        ctx.strokeStyle='black'; ctx.strokeText(d[u].hp+' '+d[u].e,p[0]+64/4,p[1]+3.8*64/4);
                    }
                }
                for(var r=0;r<11;r++){ctx.beginPath(); ctx.moveTo(0,r*64); ctx.lineTo(576,r*64); ctx.strokeStyle='#DDDDDD'; ctx.stroke();}
                for(var c=0;c<11;c++){ctx.beginPath(); ctx.moveTo(c*64,0); ctx.lineTo(c*64,576); ctx.strokeStyle='#DDDDDD'; ctx.stroke();}
                for(u in d){
                    if(d[u].t.length>1){
                        var t=d[u].t.split(' ');
                        ctx.strokeStyle='red';
                        switch(t[0]){
                        case'meteor':if(t[3])ctx.drawImage(imgs['b'],64*(parseInt(t[1])-o.lx+4-1),64*(8-(parseInt(t[2])-o.ly+4+1)));
                        case'pawnattmove':case'runover':if(d[u].lx===parseInt(t[1])&&d[u].ly===parseInt(t[2]))break;
                        case'arrow': case'poison': case'smash': case'push':
                        case'backstab':case'blind':case'sword':ctx.beginPath(); arrow(ctx,64*(d[u].lx-o.lx+4)+32,64*(8-(d[u].ly-o.ly+4))+32,64*(parseInt(t[1])-o.lx+4)+32,64*(8-(parseInt(t[2])-o.ly+4))+32); ctx.rect(64*(parseInt(t[1])-o.lx+4),64*(8-(parseInt(t[2])-o.ly+4)),64,64); ctx.stroke(); break;
                        case'grabthrow':case'cmdpawn':ctx.beginPath(); arrow(ctx,64*(parseInt(t[1])-o.lx+4)+32,64*(8-(parseInt(t[2])-o.ly+4))+32,64*(parseInt(t[3])-o.lx+4)+32,64*(8-(parseInt(t[4])-o.ly+4))+32); ctx.rect(64*(parseInt(t[1])-o.lx+4),64*(8-(parseInt(t[2])-o.ly+4)),64,64); ctx.rect(64*(parseInt(t[3])-o.lx+4),64*(8-(parseInt(t[4])-o.ly+4)),64,64); ctx.stroke(); break;
                        case'lance':
                        }
                        if(t[0]!=='move'&&t[0]!=='runover'&&t[0]!=='pawnattmove')log.innerHTML+=d[u].conn+' '+d[u].t+'\n'; // Suppress moves from log
                    }
                    var dmg=d[u].hp-(prev[d[u].conn]||0);
                    var p=[64*(d[u].lx-o.lx+4),64*(8-(d[u].ly-o.ly+4))];
                    if(dmg<0){ctx.strokeStyle='red'; ctx.strokeText(dmg,p[0]+48,p[1]+16);} // TODO: Broken for spawned walls/pawns since they share conn; also for respawning pieces
                    if(d[u].cla!=='W')prev[d[u].conn]=d[u].hp;
                }
            });
            log.scrollTop=log.scrollHeight; out.innerHTML=JSON.stringify(o);
            timer.innerHTML='&block;'; clearInterval(ticktimer); ticktimer=setInterval(function(){timer.innerHTML+='&block;';},100);
        };
    }else alert('WebSockets not supported by your browser.');
}
function send(m){if(!ws||ws.readyState!==1)connect(function(){send(m)});else{ws.send(m);}}
function msgsend(){send(input.value); input.value=""; input.focus();}
window.onkeyup=function(e){
    switch(e.keyCode){ // Include numpad/arrows?
    case 27:ws.send('move '+o.lx+' '+o.ly);break;//esc
    case 65:ws.send((o.cla==='R'?'runover ':o.cla==='P'?'pawnattmove ':'move ')+(o.lx-1)+' '+o.ly);break;//a
    case 68:ws.send((o.cla==='R'?'runover ':o.cla==='P'?'pawnattmove ':'move ')+(o.lx+1)+' '+o.ly);break;//d
    case 83:ws.send((o.cla==='R'?'runover ':o.cla==='P'?'pawnattmove ':'move ')+o.lx+' '+(o.ly-1));break;//s
    case 87:ws.send((o.cla==='R'?'runover ':o.cla==='P'?'pawnattmove ':'move ')+o.lx+' '+(o.ly+1));break;//w
    case 81:ws.send((o.cla==='B'?'sidestep ':'move ')+(o.lx-1)+' '+(o.ly+1));break;//q
    case 69:ws.send((o.cla==='B'?'sidestep ':'move ')+(o.lx+1)+' '+(o.ly+1));break;//e
    case 90:ws.send((o.cla==='B'?'sidestep ':'move ')+(o.lx-1)+' '+(o.ly-1));break;//z
    case 67:ws.send((o.cla==='B'?'sidestep ':'move ')+(o.lx+1)+' '+(o.ly-1));break;//c
    case 70:if(o.cla==='B')ws.send('meditate 0 0');break;//f
    }
    return false;
};
function lrclick(ab){
    return function(e){
        e.preventDefault(); if(e.target.id!=='cv')return false;
        var r=cv.getBoundingClientRect();
        var tx=parseInt((e.clientX-r.left)/64)-4+o.lx,ty=(8-parseInt((e.clientY-r.top)/64))-4+o.ly;
        if(ab[o.cla])ws.send(ab[o.cla]+' '+tx+' '+ty);
    };
}
window.onclick=lrclick(a.left); window.ondblclick=lrclick(a.dbl); window.oncontextmenu=lrclick(a.right);
window.ondragstart=function(e){dragged=[e.clientX,e.clientY];}; window.ondragover=function(e){e.preventDefault();};
window.ondragend=window.ondragenter=window.ondragleave=function(e){};
window.ondrop=function(e){
    e.preventDefault(); if(e.target.id!=='cv'||!dragged)return false;
    var r=cv.getBoundingClientRect();
    var tx=parseInt((dragged[0]-r.left)/64)-4+o.lx,ty=(8-parseInt((dragged[1]-r.top)/64))-4+o.ly; dragged=null;
    var tx2=parseInt((e.clientX-r.left)/64)-4+o.lx,ty2=(8-parseInt((e.clientY-r.top)/64))-4+o.ly;
    if(a.drag[o.cla])ws.send(a.drag[o.cla]+' '+tx+' '+ty+' '+tx2+' '+ty2);
};
function arrow(ctx,fx,fy,tx,ty){
    var head=10,angle=Math.atan2(ty-fy,tx-fx);
    ctx.moveTo(fx,fy);
    ctx.lineTo(tx,ty); ctx.lineTo(tx-head*Math.cos(angle-Math.PI/6),ty-head*Math.sin(angle-Math.PI/6));
    ctx.moveTo(tx,ty); ctx.lineTo(tx-head*Math.cos(angle+Math.PI/6),ty-head*Math.sin(angle+Math.PI/6));
}
</script></body></html>
